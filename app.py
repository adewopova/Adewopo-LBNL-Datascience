# Imports
import os, flask, dash
from pathlib import Path
from random import randint
import dash_bootstrap_components as dbc

# Plots
from plotly.express import bar
import pandas as pd

# Import iPoster Object Class
from iposter.iposter import iPoster
import iposter.colors as colors

#*** Run Local Flag ***
RUN_LOCAL=False

# ******************Define Your Interactive Poster Here***************
# The following shows a sample interactive poster.
# Images for sections must be saved under the assets/ folder.
# You can import code from your own modules and construct the final dash
# interactive poster here.
def create_poster():

    # Instanitate an iPoster
    my_poster = iPoster(title="Topic Modelling; Identifying Risk Factors Using Ngrams in Unstructured Medical Data", #Title of your poster
                        authors_dict={"Adewopo Victor" : "University of Cincinnati","Praneetha Gounipa" : "University of Cincinnati", # Authors in {student, mentors, PI} order
                                      "Wangia Victoria Anderson" : "University of Cincinnati",
                                      "Silvia Crivelli" : "Lawrence Berkeley National Laboratory"},
                        logo = "UC.png", # Home institution logo
                        banner_color=colors.DOE_GREEN, # Color of banner header; colors has preset colors
                        text_color=colors.WHITE)

    # Add sections to first column then add new column
    my_poster.add_section(title="Abstract",
        text="The electronic health records contain vital information that are not captured in the clinical context. Mining clinical information provides the contextual meaning of information embedded in unstructured clinical data. We explored unstructured medical notes in MIMIC III data. Structured query language was used to extract medical notes of patients based on ICD 9 diagnoses related to diseases of despair.  We applied NLP tools in pre-processing the data for topic modeling using n-gram. We utilized unigrams and bigrams together in training the LDA model which has been proven to perform better than other methods.")
    my_poster.add_section(title="Background Info",
        text="The continuous availability of longitudinal clinical records of patients generated by one or more encounters in any healthcare delivery setting prompted the mining and exploration of medical data for sentimental and contextual analysis that can be utilized by healthcare workers in providing prioritized health care and smooth workflow[1].\
        Social determinants of health are environmental conditions in which patients are exposed to which has an adverse effect on their health outcome.\
        Previous research indicated that 1 out of 60 deaths are related to suicide, 74% of adults suffer from drug abuse and 17 per 10,000 individuals are homeless every night. Identifying risk factors pertinent to this social factor is of immense benefit to health care professionals in providing comprehensive care plans and concentrated clinical and psychological support. The unstructured medical notes of patients contain a wealth of information that can be mined using analytical and natural language processing tools to generate new evidence from existing information.")
    my_poster.add_section(title="Goals and Objective", 
        text="Our main goal is to identify develop a trained model that can be used in identify patients with high risk of suicide, opioids, homelessness, and substance abuse.\
        Our objective is to unravel the unknown from the known facts presented in MIMIC III data using query languages and NLP tools to identify potential areas of research.The intrinsic motivation of my team at the Berkeley lab is to develop predictive models from unstructured medical notes that can be deployed by health care workers in tagging patients with identified risk factors.")
    my_poster.add_section(title="Methodology",
        text="For this study we utilized the MIMIC-III dataset which is a  open source dataset developed by the MIT Lab for Computational Physiology, \
        comprising deidentified health data associated with over 46,000 unique patients medical data. \
        Text mining is a field of data mining that involves the extraction of new information. \
        We identified features from the unstructured text using controlled vocabularies, rule sets, reference dictionaries that were hand coded to preserve      the contextual meaning of words in the data. This approach comprised of five steps of data selection, pre-processing, transformation, data mining and interpretation Text mining extracts information from existing data to unravel or derive new information[4].     We focused on the unstructured part of the MIMIC III data set and selected 8,583 patients that has the diagnosis related to diseases of despair[5]. \
        The International classification of diseases 9th edition was used in grouping patients diagnosed for medical conditions that are considered diseases of despair. \
        N-gram models are widely used in statistical natural language processing to identify sequence of words in a given dataset. \
        We utilized combination of unigrams, bigrams and trigrams, to yield higher accuracy in text categorization which has been proven to yield better results \
        in prior research[6].\
        We identified the top unigram words and sequence of six top words using hexagram.")  
    
    # Add sections to second column then add new column
    my_poster.next_column()
    my_poster.add_section(title="Figures",
        img1={"filename":"50-80trig.png", "height":"5in", "width":"10in", "caption":"The figure shows the top 30 recurring trigrams in order of sequence after processing our dataset."},
        img2={"filename":"word.png", "height":"5in", "width":"10in", "caption":"This shows the  word count of dominant words in six topics and the importance of the words within each topic in terms of weights."},
        img3={"filename":"wordcloud.png", "height":"6in", "width":"10in", "caption":"This figure showcase the most common keywords in each topics"})
    my_poster.add_section(title="Findings", text="We have been able to train a model that can classify patient medical history into relevant topics,\
        utilizing unigrams and bigrams together in training the LDA model. The topmost recurring trigrams suggested medical conditions related to patients taht are of old age. Hemodynamics is one of the recurring themes in the trigram, series which are related to hypertension and blood flow.\
        Hexagrams gave more contextual meaning to the top recurring words in other of sequence in the dataset [Hexagram].  The  dominant topics in the dataset are;Renal Failure, Hypertension, Diabetes, Heamodynamic and Blood organs. The Most recurring Keywords  are [‘Assessment’, ‘Respiratory’,\
        ‘Failure’, ‘Response’, ‘Plan’, ‘Action’, ‘Acute’, ‘Renal’, ‘Blood’).")
    my_poster.add_section(title="Conclusion", text="Medical information contains a large set of data. The mean word count in a single patient medical history contains about 4,700  words. Our trained model can parse through a large set of medical history and predict what topic a medical history belong too and the percentage of the contribution the topic has based on medical history. This saves health care professionals from reading a large set of patient medical history and can also be utilized in providing prioritized care based on the identified topic.     Our proposed models do not only contribute to medical research but has potential of increasing life expectancy by providing urgent medical care to at  least 1 out of 5 identified patients   and save more lives that are lost due to suicide.")        
       # Add sections to third column then add new column
    my_poster.next_column()

    
    my_poster.add_section(title="Interactive LDA Plot",
    	pyLDA2={"filename":"topic.html", "height":"7in", "width":"12in", "caption": "This figure shows the dominant topics the medical history belonging to ten patients is classified to by our model and the percentage of contribution."},
        pyLDA={"filename":"full_lda_html.html", "height":"8in", "width":"12in", "caption": "Hover the interactive plot to view the 10  topics and the frequency of the topwords.The circles represent different topics and the distance between them. Similar topics appear closer to eachother."},
        pyLDA3={"filename":"DoD-TSNE.html", "height":"7in", "width":"12in", "caption": "This figure shows a 2D cluster of patients medical notes and what topic they have been classified to in the top ten topics from our LDA model."})
             
    my_poster.add_section(title="References", 
        text="1.Atherton, J. (2011, March 1). Development of the Electronic Health Record. Retrieved from \
        https://journalofethics.ama-assn.org/article/development-electronic-health-record/2011-03.    \
        2.The White House. https://www.whitehouse.gov/wp-content/uploads/2019/09/The-State-of Homelessness-in-America.pdf.  \
        3.https://americanaddictioncenters.org/rehab-guide/addiction-statistics. \
        4.Gonzalez, G. H., Tahsin, T., Goodale, B. C., Greene, A. C., & Greene, C. S. (2016). Recent advances and emerging applications in text and data  \
        mining for biomedical discovery. Briefings in bioinformatics, 17(1), 33-42. \
        5.Zamora-Resendiz, R., Wang, X., Liu, X., & Crivelli, S. Predicting ICU Readmission with Context-Enriched Deep Learning.  \
        6.Bjarnadottir, R. I., & Lucero, R. J. (2018). What can we learn about fall risk factors from EHR nursing notes? A text mining study. eGEMs, 6(1).") 
    #my_poster.add_section(title="Other", text="This is some card text.")
    my_poster.next_column()


    return my_poster.compile()

# **********************************************************************

# Dash App Configuration
if RUN_LOCAL:
    app = dash.Dash(__name__,
                    assets_folder= str(Path(__file__).parent.absolute())+"/assets",
                    assets_url_path='/',
                    external_stylesheets=[dbc.themes.BOOTSTRAP],
                    suppress_callback_exceptions=True)
else:
    server = flask.Flask(__name__)
    server.secret_key = os.environ.get('secret_key', str(randint(0, 1000000)))
    app = dash.Dash(__name__,
                    server=server,
                    assets_folder= str(Path(__file__).parent.absolute())+"/assets",
                    assets_url_path='/',
                    external_stylesheets=[dbc.themes.BOOTSTRAP],
                    suppress_callback_exceptions=True)
app.layout = create_poster()

# Main Function
if __name__ == "__main__":
    if RUN_LOCAL:
        app.run_server(debug=False, host="0.0.0.0", port="8888")
    else:
        app.server.run(debug=True, threaded=True)
